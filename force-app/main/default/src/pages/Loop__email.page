<apex:page controller="Loop.emailExt" tabStyle="Task" id="emailPage" title="Task - Send an Email" applyHtmlTag="{!!useLightningExperience}" applyBodyTag="false" sideBar="{!!useLightningExperience}" showHeader="{!!useLightningExperience}" docType="html-5.0" standardStylesheets="true">
<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <head>
        <apex:includeScript value="/support/console/44.0/integration.js"/>
        <script type="text/javascript" src="{!URLFOR($Resource.CKEditor, 'ckeditor/ckeditor.js')}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.Scripts, 'jQuery.js')}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.Scripts, 'jQuery-UI.js')}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.Scripts, 'jquery.drawloop.js')}"></script>
        <apex:slds />
        <apex:stylesheet value="{!URLFOR($Resource.Loop__Styles, 'css/jQuery-UI/jQuery-UI.css')}"/>
        <apex:includeLightning />
        <style type="text/css">
            .cke_skin_sfdc, .cke_contents {
                min-height: 395px;
            }
            /* Lightning Experience */
            .lightningLookupIcon {
                margin-left: 10px;
            }
            .slds .slds-select {
                font-size: 1em;
            }
            .slds .slds-input {
                font-size: inherit;
            }
            .slds .slds-textarea {
                height: 48px;
                font-size: inherit;
            }
            .lookupInput {
                vertical-align: top;
            }
            .lookupMenu {
                position: absolute;
                display: none;
                box-shadow: 1px 1px 8px #888888;
            }
            div[id$=":docTemplateRichText"] .cke_toolbox .cke_toolbar.cke_toolbar_last,
            div[id$=":richTextArea"] .cke_toolbox .cke_toolbar.cke_toolbar_last,
            div[id$=":richTextBodyLe"] .cke_toolbox .cke_toolbar.cke_toolbar_last {
                visibility: hidden;
                display: none;
            }
            span.lookupInput div.slds-input-has-icon svg.slds-input__icon {
                pointer-events: auto;
            }
        </style>
        <script type="text/javascript">
            function reloadCKEditor() {
                for (name in CKEDITOR.instances) {
                    delete CKEDITOR.instances[name];
                }
                CKEDITOR.replaceAll(function(textarea, config) {
                    if (textarea.classList.contains('loop__ckeditor')) {
                        config.toolbar = 'fullSimple';
                        config.width = {!useLightningExperience} ? null : 604;
                        config.allowedContent = {
                            $1: {
                                elements: CKEDITOR.dtd,
                                attributes: true,
                                styles: true,
                                classes: true
                            }
                        };
                        config.disallowedContent = 'script; *[on*]';
                        config.removePlugins = 'magicline,div,elementspath';
                        return true;
                    }
                    return false;
                });

                // There is only ever one rich text editor on the page at a time;
                // Use this to determine whether we are targeting the classic/lightning document template editor,
                // or the classic/lightning email body editor.
                var richTextBodyCKE;
                if ({!hasDocTemplate}) {
                    richTextBodyCKE = {!useLightningExperience}
                        ? CKEDITOR.instances['emailPage:emailForm:docTemplateRichText']
                        : CKEDITOR.instances['emailPage:emailForm:emailBlock:editPage:bodySectionItem:docTemplateRichText'];
                } else {
                    richTextBodyCKE = {!useLightningExperience}
                        ? CKEDITOR.instances['emailPage:emailForm:richTextBodyLe']
                        : CKEDITOR.instances['emailPage:emailForm:emailBlock:editPage:bodySectionItem:richTextArea'];
                }

                if (richTextBodyCKE) {
                    // Set the CKEditor value to the value of the <textarea>
                    var textareaValue;
                    if ({!hasDocTemplate}) {
                        textareaValue = jQuery('[id$="docTemplateRichText"]').val();
                    } else {
                        textareaValue = {!useLightningExperience}
                            ? jQuery('[id$="richTextBodyLe"]').val()
                            : jQuery('[id$="richTextArea"]').val();
                    }
                    richTextBodyCKE.setData(textareaValue);
                    // Update the value of the <textarea> on change of the CKEditor value
                    richTextBodyCKE.on(
                        'change',
                        function() {
                            richTextBodyCKE.updateElement();
                        }
                    );
                }
            }
        </script>
        <script>
            jQuery.noConflict();
            jQuery(function() {
                jQuery('div#attachFile').dialog({
                    modal: true,
                    width: 600,
                    height: 515,
                    autoOpen: false,
                    resizable: false
                });
                enableButtons($getSendBtn());
                jQuery.notifie({
                    allowCompatibilityView: false,
                    requiredVersion: 7,
                    containerSelector: '#ieMsgs',
                    compatibilityViewMessage: '{!JSENCODE($Label.IE_Compatibility_View_Warning)}',
                    versionMessage: '{!JSENCODE($Label.IE_Higher_Version_Required)}'
                });
                setInConsole(sforce && sforce.console && sforce.console.isInConsole());
                reloadCKEditor();
            });
            (function($) {
                $.fn.closestDescendant = function(selector) {
                    var $found = $(),
                        $items = this;
                    while ($items.length && !($found = $items.filter(selector)).length) {
                        $items = $items.children();
                    }
                    return $found;
                };
            })(jQuery);

            var delim = ";";
            function pickupValue(additionalToValue, ccValue, bccValue)
            {
                var addto = document.getElementById('emailPage:emailForm:emailBlock:editPage:addTo:p24');
                if(additionalToValue != '') {
                    if (addto.value != '') {
                        addto.value += delim;
                    }
                    addto.value += additionalToValue;
                }
                var cc = document.getElementById('emailPage:emailForm:emailBlock:editPage:cc:p4');
                if(ccValue != '') {
                    if (cc.value != '') {
                        cc.value += delim;
                    }
                    cc.value += ccValue;
                }
                var bcc = document.getElementById('emailPage:emailForm:emailBlock:editPage:bcc:p5');
                if(bccValue != '') {
                    if (bcc.value != '') {
                        bcc.value += delim;
                    }
                    bcc.value += bccValue;
                }
                closePopup();
            }
            function pop(location, title, w, h)
            {
                openPopup(location, title, w, h, 'width='+w+',height='+h+',scrollbars=yes,toolbar=no,status=no,directories=no,menubar=no,resizable=yes', true);
            }
            function $getRichTextFrame() {
                return jQuery('[id$=":richTextArea_frame"]');
            }
            function getRichTextDocument() {
                return $getRichTextFrame().get(0).contentDocument;
            }
            function $getRichTextAreaElement() {
                return jQuery('[id$=":richTextArea"]');
            }
            function formatRichText() {
                var doc = getRichTextDocument();
                var accentSelector = '[data-label^="accent"]',
                    $table = jQuery('body', doc).closestDescendant('table');

                // remove any content from the accent content separators in the editor frame
                jQuery(accentSelector, doc).html('');

                // fix left-align for IE
                $table.css('text-align', 'left');

                // try to remove empty p elements injected into html by editor
                /*jQuery('p', doc).filter(function() {
                        var $elem = jQuery(this);
                        return !(jQuery.trim($elem.text()) || $elem.find('br').length);
                    }).remove();*/

                // remove any content from the accent content separators in the related textarea element
                var $textarea = $getRichTextAreaElement();
                $textarea.val(
                    jQuery('<div/>').append($textarea.val())
                        .find(accentSelector).html('').end()
                        .html()
                );

                // As long as we found the main table, resize frame
                if ($table.length) {
                    var $frame = $getRichTextFrame(),
                        $content = $frame.closest('.cke_skin_sfdc');
                    var newWidth = $table.width() + 30 + 22,
                        newHeight = $table.height() + 50;
                    if (newWidth > $content.width())
                        $content.width(newWidth);
                    if (newHeight > $frame.height())
                       $frame.height(newHeight);
                }
            }

            function log(msg) {
                window.debug && window.console && window.console.log && window.console.log(msg);
            }
            function getLookupField(referenceId) {
                var $elem = jQuery('.' + referenceId);
                if ($elem.length == 0) return null;

                // if elem is an input, we have a single lookup,
                // if it is a div, we have a multi type lookup w/ select element for type + input for record name
                return $elem.is(':input')
                    ? $elem
                    : $elem.find(':text');
            }
            function updateData(referenceId, elem) {
                log('update data for: ' + referenceId);
                if (elem === undefined) {
                    elem = jQuery(getLookupField(referenceId)).parent();
                }
                addProcessingIcon(elem);
                disableButtons($getSendBtn());
                populateData();
            }
            function $getSendBtn() {
                return jQuery('.btnSend');
            }
            function handleLookupChange(referenceId, sender) {
                if (sender && sender.name.indexOf('_mlktp') === sender.name.length - 6) {
                    return false;
                }
                setTimeout(function() {
                    var $lookup = getLookupField(referenceId);
                    if ($lookup.length && hasValidId($lookup)) {
                        updateData(referenceId, $lookup.parent());
                    }
                }, 1);
            }
            function hasValidId($lookup) {
                if ($lookup.val()) {
                    var $recordIdElement =
                        $lookup.attr('id').substring($lookup.attr('id').length - 5) == '_lkid'
                            ? $lookup
                            : jQuery('[id="' + $lookup.attr('id') + '_lkid' + '"]');
                    return ($recordIdElement.length
                        && ($recordIdElement.val().length == 15 || $recordIdElement.val().length == 18));
                }
                return false;
            }
            function addProcessingIcon(elem) {
                jQuery(elem).append('<span class="statusContainer"><span class="status"><img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..."/></span></span>');
            }
            function enableButtons($btns) {
                $btns.addClass('btn').removeClass('btnDisabled').each(function() {
                    this.disabled = false;
                    var origText = jQuery(this).data('origText');
                    if (origText) {
                        this.value = origText;
                    }
                });
            };
            function disableButtons($btns, replacementText) {
                $btns.addClass('btnDisabled').removeClass('btn').each(function() {
                    this.disabled = true;
                    if (replacementText !== undefined) {
                        jQuery(this).data('origText', this.value).val(replacementText);
                    }
                });
            };
            // Email template pop-up selector - from LM
            function emailSelect()
            {
                if ({!useLightningExperience}) {
                    toggleModal(true);
                } else {
                    var eSelUrl = '{!JSENCODE($Page.selectemailtemplate)}?lm=true&showHeader=false';
                    var eSelWin = window.open(eSelUrl, "SelectEmailTemplate", "directories=no,height=300,location=no,scrollbars=yes,menubar=no,toolbar=no,width=800");
                }
            }

            function toggleModal(visible) {
                $modal = jQuery('#selectTemplateModal');
                if ($modal.css('display') == 'none') {
                    $modal.css('display', 'inline');
                } else {
                    $modal.css('display', 'none');
                }
                $modalBackdrop = jQuery('#selectTemplateModalBackdrop');
                if ($modalBackdrop.hasClass('slds-backdrop--open')) {
                    $modalBackdrop.removeClass('slds-backdrop--open');
                } else {
                    $modalBackdrop.addClass('slds-backdrop--open');
                }
            }

            function setEmailTemplate(id) {
                log('Setting email template: ' + id);
                jQuery('[id$=":requestedTemplateId"]').val(id);
                disableButtons($getSendBtn());
                populateData(id);
            }

            function closeTab(hasSent) {
                if (window.sforce && sforce.console && sforce.console.isInConsole()) {
                    sforce.console.getEnclosingTabId(function (result) {
                        if (hasSent && '{!JSENCODE($Request.previousTabId)}') {
                            sforce.console.refreshSubtabById('{!JSENCODE($Request.previousTabId)}', false, function (result2) {
                                sforce.console.closeTab(result.id);
                            });
                        }
                        else {
                            sforce.console.closeTab(result.id);
                        }
                    });
                    return false;
                }
                return true;
            }

            function getDocHeight(doc) {
                return Math.max(
                    doc.body.scrollHeight,
                    doc.body.offsetHeight,
                    doc.documentElement.clientHeight,
                    doc.documentElement.scrollHeight,
                    doc.documentElement.offsetHeight
                );
            }
        </script>
    </head>
    <body style="padding: 0; margin: 0;">
        <div id="ieMsgs"/>
        <apex:form id="emailForm">
            <apex:inputHidden id="requestedTemplateId" value="{!requestedTemplateId}"/>
            <apex:actionFunction action="{!populateData}" name="populateData" rerender="subjectPanelLe, bodyPanelLe, leMsgs, emailBlock, msgs" oncomplete="reloadCKEditor();">
                <apex:param name="requestedTemplateId" assignTo="{!requestedTemplateId}" value=""/>
            </apex:actionFunction>
            <apex:actionFunction name="setInConsole" rerender="">
                <apex:param name="inConsole" assignto="{!isInConsole}" value=""/>
            </apex:actionFunction>

            <apex:outputPanel rendered="{!!useLightningExperience}">
                <apex:pageMessages id="msgs"/>
                <apex:sectionHeader title="Task" subtitle="Send an Email"/>
                <apex:pageblock id="emailBlock" mode="edit">
                    <apex:pageBlockButtons location="{!IF(customTemplate, 'top', 'both')}">
                        <apex:commandButton title="Send" alt="Send" value="Send" action="{!sendEmail}" rerender="msgs" styleClass="btnSend" oncomplete="if ({!closeTab}) { closeTab(true); }"/>
                        <apex:commandButton title="Select Template" alt="Select Template" value="Select Template" onclick="emailSelect(); return false;" rendered="{!ISNULL(docTemplate)}"/>
                        <apex:commandButton title="Attach File" alt="Attach File" value="Attach File" onclick="jQuery('div#attachFile').dialog('open');" reRender="attachments"/>
                        <apex:commandButton title="Cancel" alt="Cancel" value="Cancel" action="{!cancel}" immediate="true" onclick="return closeTab();"/>
                    </apex:pageBlockButtons>
                    <apex:pageBlockSection title="Edit Email" collapsible="false" columns="1" id="editPage">
                        <apex:pageBlockSectionItem rendered="{!showSenderEmailOptions}">
                            <apex:outputLabel for="p26" value="From"/>
                            <apex:outputPanel >
                                <apex:selectList id="p26" required="true" value="{!senderEmailId}" size="1">
                                    <apex:selectOptions value="{!senderEmailOptions}"/>
                                </apex:selectList>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem >
                            <apex:outputLabel for="p2" value="To"/>
                            <apex:outputPanel >
                                <apex:inputField value="{!taskRecord.WhoId}" id="p2" styleClass="lkfld whoId"/>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem >
                            <apex:outputLabel for="p3" value="Related To"/>
                            <apex:inputfield value="{!taskRecord.WhatId}" id="p3" styleClass="lkfld whatId"/>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem id="addTo">
                            <apex:outputLabel style="cursor: pointer;" for="p24" value="Additional To:"/>
                            <apex:inputTextarea id="p24" cols="65" value="{!addto}"/>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem id="cc">
                            <apex:outputLabel style="cursor: pointer;" for="p4" value="CC:"/>
                            <apex:inputTextarea id="p4" cols="65" value="{!cc}"/>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem id="bcc">
                            <apex:outputLabel style="cursor: pointer;" for="p5" value="BCC:"/>
                            <apex:inputTextarea id="p5" cols="65" value="{!bcc}"/>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem id="sectionSubject">
                            <apex:outputLabel for="p6" value="Subject"/>
                            <apex:outputPanel layout="block" styleClass="requiredInput" id="subjectPanel">
                                <apex:outputPanel layout="block" styleClass="requiredBlock"></apex:outputPanel>
                                <apex:inputText id="p6" size="70" value="{!subject}"/>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem id="bodySectionItem">
                            <apex:outputLabel for="p7" value="Body"/>
                            <apex:outputPanel id="bodyPanel">
                                <apex:outputPanel rendered="{!richText && NOT(customTemplate)}">
                                    <apex:inputTextarea id="richTextArea" styleClass="loop__ckeditor" value="{!htmlBody}"/>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!NOT(richText) && NOT(hasDocTemplate)}">
                                    <apex:inputTextarea cols="93" rows="15" richText="false" value="{!plainTextBody}"/>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!richText && customTemplate && NOT(hasDocTemplate)}">
                                    <div class="slds-form-element__control">
                                        <iframe id="contentFrame" srcdoc="{!template.htmlValue}" style="width:640px; background-color:#FFFFFF; border-style:dotted; border-width:1px;" onload="jQuery(this).height(getDocHeight(this.contentDocument) + 20)"/>
                                    </div>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!hasDocTemplate}">
                                    <apex:inputTextarea id="docTemplateRichText" styleClass="loop__ckeditor" value="{!docTemplate}"/>
                                </apex:outputPanel>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!NOT(richText) && NOT(hasDocTemplate)}" id="signature">
                            <apex:outputLabel value=""/>
                            <apex:outputPanel >
                                <apex:inputCheckbox id="includeSignature" value="{!includeSignature}"/>
                                <apex:outputLabel for="includeSignature" value="Include Signature"/>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                </apex:pageBlock>
                <apex:outputPanel layout="block" id="attachments">
                    <apex:pageBlock rendered="{!richText && customTemplate}">
                        <apex:pageBlockButtons location="bottom">
                            <apex:commandButton title="Send" alt="Send" value="Send" action="{!sendEmail}" rerender="msgs" styleClass="btnSend" oncomplete="if ({!closeTab}) { closeTab(true); }"/>
                            <apex:commandButton title="Select Template" alt="Select Template" value="Select Template" onclick="emailSelect(); return false;"/>
                            <apex:commandButton title="Attach File" alt="Attach File" value="Attach File" onclick="jQuery('div#attachFile').dialog('open');" reRender="attachments"/>
                            <apex:commandButton title="Cancel" alt="Cancel" value="Cancel" action="{!cancel}" immediate="true" onclick="return closeTab();"/>
                        </apex:pageBlockButtons>
                    </apex:pageblock>
                    <apex:pageBlock title="Attachments" id="attachmentspb">
                        <apex:pageBlockButtons location="top">
                            <apex:commandButton title="Attach File" alt="Attach File" value="Attach File" onclick="jQuery('div#attachFile').dialog('open');" reRender="attachmentspb"/>
                        </apex:pageBlockButtons>
                        <apex:pageBlockTable value="{!attachments}" var="attachment" id="attachmentspbt">
                            <apex:column width="40px">
                                <apex:facet name="header">Action</apex:facet>
                                <apex:commandLink action="{!del}" value="Del">
                                    <apex:param name="delId" value="{!attachment.id}"/>
                                </apex:commandLink>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">File</apex:facet>
                                <apex:outputLink value="/servlet/servlet.FileDownload?file={!attachment.id}">{!attachment.name}</apex:outputLink>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Size</apex:facet>
                                {!ROUND(attachment.bodylength/1000,0)} KB
                            </apex:column>
                        </apex:pageBlockTable>
                    </apex:pageBlock>
                </apex:outputPanel>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!useLightningExperience}" styleClass="slds-scope">
                <div class="slds-page-header">
                    <div class="slds-grid slds-grid--align-spread">
                        <div class="slds-media slds-col">
                            <div class="slds-media__figure">
                                <span class="slds-icon__container slds-icon-standard-email" style="padding: .5rem;">
                                    <svg aria-hidden="true" class="slds-icon icon__svg">
                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/action-sprite/svg/symbols.svg#email')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Send an Email</span>
                                </span>
                            </div>
                            <div class="slds-media__body">
                                <p class="slds-text-heading--label">TASK</p>
                                <div class="slds-grid">
                                    <div class="slds-col">
                                        <h1 class="slds-text-heading--medium slds-m-right--small slds-truncate">Send an Email</h1>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <apex:outputPanel id="leMsgs">
                    <script>
                        function lightningRedirect(handleErrors) {
                            $leMsgsDiv = jQuery('#leMsgsDiv');
                            var lePageMessage = '{!JSINHTMLENCODE(pageMessage)}';
                            if (handleErrors && $leMsgsDiv && lePageMessage) {
                                // Adding svg with javascript because it is not supported by visualforce rerendering
                                var svg = '<svg aria-hidden="true" class="slds-icon icon-text-email slds-icon--small slds-m-right--x-small">' +
                                    '<use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#ban')}"/>' +
                                    '</svg>';
                                $leMsgsDiv.prepend(svg);

                                jQuery("html, body").animate({ scrollTop: 0 }, "slow");
                            } else {
                                if ($leMsgsDiv) {
                                    $leMsgsDiv.remove();
                                }
                                sforce.one.navigateToSObject("{!JSENCODE(recordId)}");
                            }
                        };

                        function formatLookup(lookupId, lookupDivId, lookupTopId, lookupLabelId, lookupMenu, lookupMenuFunction) {
                            // Style the apex:inputField to conform to SLDS
                            var inputFieldWrapper = jQuery('[id$=\":' + lookupTopId + '\"]');
                            inputFieldWrapper.addClass('slds-grid slds-m-left_none slds-wrap');

                            var objectSelect = inputFieldWrapper.find('select');
                            objectSelect.addClass('slds-col slds-select slds-size_2-of-7');

                            var recordNameInputContainer = inputFieldWrapper.find('span.lookupInput');
                            var lookupSelectDropdownMenu = jQuery('[id$=\":' + lookupMenu + '\"]');
                            recordNameInputContainer.addClass('slds-col slds-is-relative slds-m-left_small');
                            recordNameInputContainer.append(lookupSelectDropdownMenu.remove());

                            var recordNameInput = recordNameInputContainer.find('input');
                            recordNameInput.addClass('slds-size_1-of-1 slds-input');

                            // Rewire the lookup popup link functionality to call our query record function
                            var lookupSelectionPopupLink = recordNameInputContainer.find('a');
                            var queryRecords = function() {
                                var objectType = objectSelect.find('option:selected').text();
                                var searchString = recordNameInput.val();
                                lookupMenuFunction(objectType, searchString);
                            };
                            lookupSelectionPopupLink.attr('href', '');
                            lookupSelectionPopupLink.html(jQuery(
                                '<div class="slds-input-has-icon slds-input-has-icon--right" style="position: relative; top: -16px;">' +
                                    '<svg aria-hidden="true" class="slds-input__icon">' +
                                        '<use xlink:href={!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#search")}></use>' +
                                    '</svg>' +
                                '</div>'
                            ));
                            lookupSelectionPopupLink.click(function(event) {
                                event.preventDefault();
                                queryRecords();
                            });
                            lookupSelectionPopupLink.keydown(function(event) {
                                if (event.which === 13) {// "Enter" key is pressed
                                    event.preventDefault();
                                    queryRecords();
                                }
                            });
                        }

                        function setLookupValue(li, inputId, menuId) {
                            var id = jQuery(li).find('a').attr('id');
                            if (id) {
                                var value = jQuery(li).find('a').text().trim();
                                jQuery('[id$=\":' + inputId + '\"]').val(value);
                                var $menu = jQuery('[id$=\":' + menuId + '\"]');
                                $menu.css('display', 'none');
                            }
                        }

                        function addJsToMenu(menuId, inputId) {
                            var $menu = jQuery('[id$=\":' + menuId + '\"]');
                            if ($menu.find('li').length > 0) {
                                $menu.css('display', 'block');
                                if ($menu.find('li').length == 1) {
                                    setLookupValue($menu.find('li')[0], inputId, menuId);
                                }
                            } else {
                                $menu.css('display', 'none');
                            }
                        }

                        function closeMenu(menuId) {
                            setTimeout(function() {
                                var $menu = jQuery('[id$=\":' + menuId + '\"]');
                                $menu.css('display', 'none');
                            }, 100);
                        }

                        function hasPageMessages() {
                            return '{!ISBLANK(pageMessage)}' === 'false';
                        }

                        function getSelectedWhatIdObjectType() {
                            return jQuery('[id$=\":whatId_top\"]').find('select').find('option:selected').text();
                        }

                        function getSelectedWhoIdObjectType() {
                            return jQuery('[id$=\":whoId_top\"]').find('select').find('option:selected').text();
                        }
                    </script>
                    <apex:outputPanel rendered="{!NOT(ISBLANK(pageMessage))}">
                        <div class="slds-notify_container">
                            <div id="leMsgsDiv" class="slds-notify slds-notify--alert slds-theme--error slds-theme--alert-texture">
                                {!pageMessage}
                            </div>
                        </div>
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel layout="block" styleClass="slds-form--stacked" style="padding: 25px;">
                    <apex:outputPanel layout="block" style="max-width: 800px;margin: auto;">
                        <apex:outputPanel layout="block" styleClass="slds-form-element" rendered="{!showSenderEmailOptions}">
                            <label class="slds-form-element__label" for="p26">From</label>
                            <div class="slds-form-element__control">
                                <apex:selectList id="p26" required="true" value="{!senderEmailId}" styleClass="slds-select" size="1">
                                    <apex:selectOptions value="{!senderEmailOptions}"/>
                                </apex:selectList>
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="block" styleClass="slds-form-element" id="whoIdDiv">
                            <label class="slds-form-element__label" for="p24" id="whoIdLabel">To</label>
                            <div class="slds-form-element__control" id="newElementControl">
                                <apex:inputField label="whoId" value="{!taskRecord.whoId}" id="whoId" onchange="closeMenu('whoIdMenu');" onblur="closeMenu('whoIdMenu');"/>
                            </div>
                        </apex:outputPanel>
                        <apex:actionRegion >
                            <apex:outputPanel layout="block" id="whoIdMenu" styleClass="slds-lookup__menu lookupMenu">
                                <ul class="slds-lookup__list">
                                    <apex:repeat value="{!lookupValues}" var="lookupValue">
                                        <li class="slds-lookup__item" onclick="setLookupValue(this, 'whoId', 'whoIdMenu');">
                                            <a id="{!lookupValue.Id}" href="#">{!lookupValue.Value}</a>
                                        </li>
                                    </apex:repeat>
                                </ul>
                                <script>
                                    addJsToMenu('whoIdMenu', 'whoId');
                                </script>
                            </apex:outputPanel>
                            <apex:actionFunction name="queryLookup" action="{!searchSObject}" rerender="whoIdMenu">
                                <apex:param name="objectType" value=""/>
                                <apex:param name="searchString" value=""/>
                            </apex:actionFunction>
                            <script>
                                formatLookup('whoId', 'whoIdDiv', 'whoId_top', 'whoIdLabel', 'whoIdMenu', function(objectType, searchString) {
                                    queryLookup(objectType, searchString);
                                });
                            </script>
                        </apex:actionRegion>
                        <apex:outputPanel layout="block" styleClass="slds-form-element" id="whatIdDiv">
                            <label class="slds-form-element__label" for="p24" id="whatIdLabel">Related To</label>
                            <div class="slds-form-element__control" id="newElementControl">
                                <apex:inputField label="whatId" value="{!taskRecord.whatId}" id="whatId" onchange="closeMenu('whatIdMenu');" onblur="closeMenu('whatIdMenu');"/>
                            </div>
                        </apex:outputPanel>
                        <apex:actionRegion >
                            <apex:outputPanel layout="block" id="whatIdMenu" styleClass="slds-lookup__menu lookupMenu">
                                <ul class="slds-lookup__list">
                                    <apex:repeat value="{!lookupValues}" var="lookupValue">
                                        <li class="slds-lookup__item" onclick="setLookupValue(this, 'whatId', 'whatIdMenu');">
                                            <a id="{!lookupValue.Id}" href="#">{!lookupValue.Value}</a>
                                        </li>
                                    </apex:repeat>
                                </ul>
                                <script>
                                    addJsToMenu('whatIdMenu', 'whatId');
                                </script>
                            </apex:outputPanel>
                            <apex:actionFunction name="queryLookup2" action="{!searchSObject}" rerender="whatIdMenu">
                                <apex:param name="objectType" value=""/>
                                <apex:param name="searchString" value=""/>
                            </apex:actionFunction>
                            <script>
                                formatLookup('whatId', 'whatIdDiv', 'whatId_top', 'whatIdLabel', 'whatIdMenu', function(objectType, searchString) {
                                    queryLookup2(objectType, searchString);
                                });
                            </script>
                        </apex:actionRegion>
                        <apex:outputPanel layout="block" styleClass="slds-form-element">
                            <label class="slds-form-element__label" for="p24">Additional To</label>
                            <div class="slds-form-element__control">
                                <apex:inputTextarea id="p24" value="{!addto}" styleClass="slds-textarea"/>
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="block" styleClass="slds-form-element">
                            <label class="slds-form-element__label" for="p4">CC</label>
                            <div class="slds-form-element__control">
                                <apex:inputTextarea id="p4" value="{!cc}" styleClass="slds-textarea"/>
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="block" styleClass="slds-form-element">
                            <label class="slds-form-element__label" for="p5">BCC</label>
                            <div class="slds-form-element__control">
                                <apex:inputTextarea id="p5" value="{!bcc}" styleClass="slds-textarea"/>
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="block" styleClass="slds-form-element slds-is-required" id="subjectPanelLe">
                            <label class="slds-form-element__label" for="p6">Subject</label>
                            <div class="slds-form-element__control">
                                <apex:inputText id="p6" value="{!subject}" styleClass="slds-input"/>
                            </div>
                        </apex:outputPanel>
                        <script>
                            $subject = jQuery('[id$=":p6"]');
                            $subject.keydown(function(event) {
                                if (event.which == 13) {
                                    event.preventDefault();
                                    jQuery('[id$=":sendButton"]').click();
                                }
                            });
                        </script>
                        <apex:outputPanel id="bodyPanelLe">
                            <apex:outputPanel layout="block" styleClass="slds-form-element" rendered="{!richText && NOT(customTemplate)}">
                                <label class="slds-form-element__label" for="p7">Body</label>
                                <div class="slds-form-element__control">
                                    <apex:inputTextarea id="richTextBodyLe" styleClass="loop__ckeditor" value="{!htmlBody}"/>
                                </div>
                            </apex:outputPanel>
                            <apex:outputPanel layout="block" styleClass="slds-form-element" rendered="{!NOT(richText) && NOT(hasDocTemplate)}">
                                <label class="slds-form-element__label" for="text">Body</label>
                                <div class="slds-form-element__control">
                                    <apex:inputTextarea cols="70" richText="false" value="{!plainTextBody}" styleClass="slds-textarea" style="height: 150px;"/>
                                </div>
                            </apex:outputPanel>
                            <apex:outputPanel layout="block" styleClass="slds-form-element" rendered="{!richText && customTemplate && NOT(hasDocTemplate)}">
                                <label class="slds-form-element__label"></label>
                                <div class="slds-form-element__control">
                                    <iframe id="contentFrame" srcdoc="{!template.htmlValue}" style="width:640px; background-color:#FFFFFF; border-style:dotted; border-width:1px;" onload="jQuery(this).height(getDocHeight(this.contentDocument) + 20);"/>
                                </div>
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!hasDocTemplate}">
                                <apex:outputLabel for="docTemplate" value="Body"/>
                                <div class="slds-form-element__control slds-m-bottom_small">
                                    <apex:inputTextarea id="docTemplateRichText" styleClass="loop__ckeditor" value="{!docTemplate}"/>
                                </div>
                            </apex:outputPanel>
                        </apex:outputPanel>
                        <apex:outputPanel layout="block" styleClass="slds-form-element" rendered="{!NOT(richText) && NOT(hasDocTemplate)}">
                            <div class="slds-form-element__control">
                                <label class="slds-checkbox">
                                    <apex:inputCheckbox value="{!includeSignature}"/>
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">Include Signature</span>
                                </label>
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="block" styleClass="slds-form-element" rendered="{!NOT(hasDocTemplate)}">
                            <div class="slds-form-element__control">
                                <div>
                                    <div style="display: inline-block;">
                                        <apex:commandLink onclick="emailSelect(); return false;">
                                            <span class="slds-m-right--small">
                                                <svg aria-hidden="true" class="slds-icon slds-icon--small slds-icon-text-default" data-reactid=".4.0.0">
                                                    <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#insert_template')}"/>
                                                </svg>
                                                <span class="slds-assistive-text" data-reactid=".4.0.1">S</span>
                                            </span>
                                        </apex:commandLink>
                                    </div>
                                </div>
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel >
                            <div style="float: right;display: inline-block;" class="slds-m-bottom_small">
                                <apex:actionFunction name="sendEmail" action="{!sendEmail}" reRender="leMsgs" oncomplete="if (!hasPageMessages()) { if ({!closeTab}) { closeTab(true); } else { lightningRedirect(true); } }">
                                    <apex:param name="whoIdObjectType" value=""/>
                                    <apex:param name="whatIdObjectType" value=""/>
                                </apex:actionFunction>
                                <apex:commandButton title="Cancel" alt="Cancel" value="Cancel" action="{!cancel}" immediate="true" onclick="closeTab();" oncomplete="lightningRedirect(false)" styleClass="slds-button slds-button--neutral"/>
                                <apex:commandButton id="sendButton" title="Send" alt="Send" value="Send" onClick="sendEmail(getSelectedWhoIdObjectType(), getSelectedWhatIdObjectType()); return false;" styleClass="slds-button slds-button--brand" style="margin-left: 12px;"/>
                            </div>
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel id="attachmentsLe" layout="block" style="padding: 25px;">
                    <apex:dataTable value="{!attachments}" var="attachment" styleClass="slds-table slds-table--bordered" rendered="{!attachmentsExist}">
                        <apex:facet name="header">Attachments</apex:facet>
                        <apex:column >
                            <apex:facet name="header">Action</apex:facet>
                            <apex:commandLink action="{!del}" value="Del" rerender="attachmentsLe">
                                <apex:param name="delId" value="{!attachment.id}"/>
                            </apex:commandLink>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">File</apex:facet>
                            <apex:outputLink value="/servlet/servlet.FileDownload?file={!attachment.id}">{!attachment.name}</apex:outputLink>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Size</apex:facet>
                            <apex:outputText value="{!ROUND(attachment.bodylength/1000,0)} KB"/>
                        </apex:column>
                    </apex:dataTable>
                </apex:outputPanel>
                <div id="selectTemplateModal" class="slds-modal slds-modal--large" aria-hidden="false" role="dialog" style="opacity: 1; visibility: visible; display: none;z-index: 100;">
                    <div class="slds-modal__container">
                        <div class="slds-modal__header">
                            <button class="slds-button slds-button--icon-inverse slds-modal__close" onclick="toggleModal();return false;">
                                <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                    <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/action-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                                <span class="slds-assistive-text">Close</span>
                            </button>
                            <h2 class="slds-text-heading--medium">Active Templates</h2>
                        </div>
                        <iframe id="selectEmailTemplateIframe" src="{!JSENCODE($Page.selectemailtemplate)}?lm=true&showHeader=false&uselightningexperience=true" style="border: 0px;height: 100%;"/>
                        <div class="slds-modal__footer slds-modal__footer--directional">
                            <button class="slds-button slds-button--neutral" onclick="toggleModal();return false;">Cancel</button>
                        </div>
                    </div>
                </div>
                <div id="selectTemplateModalBackdrop" class="slds-backdrop" style="z-index: 99;"/>
            </apex:outputPanel>
        </apex:form>
        <div style="display: none;">
            <div id="attachFile" title="Attach File">
                <apex:form >
                    <apex:actionRegion >
                        <apex:pageBlock id="filesPB">
                            <apex:pageBlockButtons location="top">
                                <apex:outputLabel for="folder" value="File Location "/>&nbsp;
                                <apex:selectList id="folder" size="1" value="{!folderId}">
                                    <apex:selectOption itemLabel="My Personal Documents" itemValue="{!$User.Id}"/>
                                    <apex:selectOptions value="{!folders}"/>
                                    <apex:actionSupport event="onchange" rerender="files" action="{!changeFolder}"/>
                                </apex:selectList>&nbsp;
                            </apex:pageBlockButtons>
                            <div style="overflow-y: auto; max-height: 400px;">
                                <apex:pageBlockTable value="{!files}" var="file" id="files">
                                    <apex:column >
                                        <apex:facet name="header">Name</apex:facet>
                                        <apex:commandLink action="{!addDocId}" value="{!file.name}">
                                            <apex:param name="fileId" value="{!file.id}"/>
                                        </apex:commandLink>
                                    </apex:column>
                                    <apex:column >
                                        <apex:facet name="header">Author</apex:facet>
                                        {!file.CreatedBy.Alias}
                                    </apex:column>
                                    <apex:column >
                                        <apex:facet name="header">Size</apex:facet>
                                        {!ROUND(file.bodylength/1000,0)} KB
                                    </apex:column>
                                    <apex:column >
                                        <apex:facet name="header">Internal Use Only</apex:facet>
                                        <apex:inputCheckbox value="{!file.isinternaluseonly}" disabled="true"/>
                                    </apex:column>
                                </apex:pageBlockTable>
                            </div>
                        </apex:pageBlock>
                    </apex:actionRegion>
                </apex:form>
            </div>
        </div>
    </body>
</html>
</apex:page>