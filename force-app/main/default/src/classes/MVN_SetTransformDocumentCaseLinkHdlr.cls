/**
 * @author      Mavens
 * @group       TransformDocument
 * @description Trigger handler that on transformation of a document, checks the ContentDocumentLink
 *              generated by that action, and creates a new ContentDocumentLink record between the
 *              transformed file and the case generating the transformation.
 *              Is also deletes DocumentCheckListItem record used for the transformation.
 */
public with sharing class MVN_SetTransformDocumentCaseLinkHdlr implements PJN_TriggerDispatcher.HandlerInterface {

    /**
     * Trigger handler to reassign file to case and delete checklist items if matches all criteria
     */
    public void handle() {
        if (Trigger.isAfter && Trigger.isInsert) {
            Map<Id, DocumentChecklistItem> checklistByIds = getChecklistItemsById();
            setTransformDocumentCaseLink(checklistByIds);
        }
    }

    /**
     * Get all Document Checklist Items from the Content Document Links
     * @return  `Map<Id, DocumentChecklistItem>`
    */
    private Map<Id, DocumentChecklistItem> getChecklistItemsById() {
        Map<Id, DocumentChecklistItem> checklistItemsById = new Map<Id, DocumentChecklistItem>();
        Set<Id> checklistItemIds = new Set<Id>();
        for (ContentDocumentLink cdl : (List<ContentDocumentLink>) Trigger.new) {
            checklistItemIds.add(cdl.LinkedEntityId);
        }
        return new Map<Id, DocumentChecklistItem>(
            [
                SELECT
                    Id,
                    Name,
                    ParentRecordId,
                    Status,
                    MVN_Document_Id__c
                FROM
                    DocumentChecklistItem
                WHERE
                    Id IN :checklistItemIds
            ]
        );
    }

    /**
     * Reassign CDL to the Parent Record Id if matches:
     *      - Parent Record Id is a Case Record Id
     *      - CDL Linked Entity Id is a Document Checklist Item Id
     *      - Document Checklist Item found
     *      - Document Checklist Item has a MVN Document Id
     * Deletes Document Checklist Items and CDLs related
     * @param checklistByIds    Document Checklist Item records by Id
    */
    private void setTransformDocumentCaseLink(Map<Id, DocumentChecklistItem> checklistByIds) {
        Map<Id, ContentDocumentLink> cdlsMap = new Map<Id, ContentDocumentLink>();
        Set<Id> dcliIdsToDelete = new Set<Id>();
        for (ContentDocumentLink cdl : (List<ContentDocumentLink>) Trigger.new) {
            String sObjectName = cdl.LinkedEntityId.getSObjectType().getDescribe().getName();
            DocumentChecklistItem dcli = checklistByIds.get(cdl.LinkedEntityId);
            if (sObjectName.toLowerCase() == 'documentchecklistitem' && dcli != null && dcli.MVN_Document_Id__c != null) {
                String parentSObjectName = dcli.ParentRecordId.getSObjectType().getDescribe().getName();
                if (parentSObjectName.toLowerCase() != 'case') {
                    continue;
                }
                cdlsMap.put(
                    dcli.ParentRecordId,
                    new ContentDocumentLink (
                        LinkedEntityId = dcli.ParentRecordId,
                        ContentDocumentId = cdl.ContentDocumentId,
                        ShareType = 'I',
                        Visibility = 'AllUsers'
                    )
                );
                dcliIdsToDelete.add(dcli.Id);
            }
        }
        List<ContentDocumentLink> cdlsToInsert = getNonExistingContentDocumentLinks(cdlsMap);
        insert cdlsToInsert;
        deleteContentDocLinkForDocChecklistItem(dcliIdsToDelete);
    }

    /**
     * Get Non Existing CDLs which need to be inserted into the database.
     * Receive a map of CDL records by Linked Entity Id used to identify existing CDLs in the database and
     * avoid duplicates in the insert action
     * @param cdlsMap   Map of CDL records by Linked Entity Id
     * @return  `List<ContentDocumentLink>`
     */
    private List<ContentDocumentLink> getNonExistingContentDocumentLinks(Map<Id, ContentDocumentLink> cdlsMap) {
        List<ContentDocumentLink> cdlsToInsert = new List<ContentDocumentLink>();
        if (cdlsMap.isEmpty()) {
            return cdlsToInsert;
        }
        Map<Id, Set<Id>> cdlIdsByLinkedEntityId = getCdlIdsByLinkedEntityId(cdlsMap.keySet());
        for (ContentDocumentLink thisCDL : cdlsMap.values()) {
            Set<Id> cdlIds = cdlIdsByLinkedEntityId.containsKey(thisCDL.LinkedEntityId) ?
                cdlIdsByLinkedEntityId.get(thisCDL.LinkedEntityId) :
                new Set<Id>();
            if (!cdlIds.contains(thisCDL.ContentDocumentId)) {
                cdlsToInsert.add(thisCDL);
            }
        }
        return cdlsToInsert;
    }

    /**
     * Get CDL Ids related to a record id.
     * Receving a list of record ids return all the CDL Ids related to these record Ids
     * in a map
     * @param linkedEntityIds   List of record Ids
     * @return  `Map<Id, Set<Id>>`
     */
    private Map<Id, Set<Id>> getCdlIdsByLinkedEntityId(Set<Id> linkedEntityIds) {
        Map<Id, Set<Id>> cdlIdsByLinkedEntityId = new Map<Id, Set<Id>>();
        for (ContentDocumentLink cdl :[
            SELECT
                Id,
                LinkedEntityId,
                ContentDocumentId
            FROM
                ContentDocumentLink
            WHERE
                LinkedEntityId IN :linkedEntityIds
        ]) {
            Set<Id> cdlIds = cdlIdsByLinkedEntityId.containsKey(cdl.LinkedEntityId) ?
                cdlIdsByLinkedEntityId.get(cdl.LinkedEntityId) :
                new Set<Id>();
            cdlIds.add(cdl.ContentDocumentId);
            cdlIdsByLinkedEntityId.put(cdl.LinkedEntityId, cdlIds);
        }
        return cdlIdsByLinkedEntityId;
    }

    /**
     * Delete CDLs related to Checklist item records.
     * Then delete all the checklist item records provided
     * @param dcliIds Document Checklist item record ids used to delete content document links
     */
    private void deleteContentDocLinkForDocChecklistItem(Set<Id> dcliIds) {
        if (dcliIds.isEmpty()) {
            return;
        }
        delete [
            SELECT
                Id
            FROM
                ContentDocumentLink
            WHERE
                LinkedEntityId IN :dcliIds
        ];
    }
}